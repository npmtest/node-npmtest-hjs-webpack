{"/home/travis/build/npmtest/node-npmtest-hjs-webpack/test.js":"/* istanbul instrument in package npmtest_hjs_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/lib.npmtest_hjs_webpack.js":"/* istanbul instrument in package npmtest_hjs_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hjs_webpack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hjs_webpack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hjs-webpack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hjs_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hjs_webpack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hjs_webpack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hjs_webpack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hjs_webpack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hjs_webpack.__dirname + '/lib.npmtest_hjs_webpack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/index.js":"var fs = require('fs')\nvar path = require('path')\nvar rimraf = require('rimraf')\nvar webpack = require('webpack')\nvar defaults = require('lodash.defaults')\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\nvar containsPath = require('contains-path')\nvar getBaseConfig = require('./lib/base-config')\nvar getPackage = require('./lib/get-package')\nvar installedStyleLoaders = require('./lib/installed-style-loaders')\nvar installedHotLoaders = require('./lib/installed-hot-loaders')\nvar isInstalled = require('./lib/is-installed')\n\n// default to `true` if running `hjs-dev-server`\nvar isDev = (process.argv[1] || '').indexOf('hjs-dev-server') !== -1\n\nmodule.exports = function (opts) {\n  checkRequired(opts)\n  var outputFolder = path.resolve(opts.out)\n  var cwd = process.cwd()\n\n  // add in our defaults\n  var spec = defaults(opts, {\n    entry: path.resolve(opts.in),\n    output: defaults(opts.output || {}, {\n      path: outputFolder + '/',\n      filename: null,\n      cssFilename: null,\n      hash: false,\n      publicPath: '/'\n    }),\n    configFile: null,\n    isDev: isDev,\n    package: null,\n    replace: null,\n    https: false,\n    port: 3000,\n    hostname: 'localhost',\n    html: true,\n    urlLoaderLimit: 10000,\n    clearBeforeBuild: false,\n    serveCustomHtmlInDev: true,\n    devServer: {},\n    uglify: defaults(opts.uglify || {}, {\n      output: {\n        comments: false\n      }\n    })\n  })\n\n  spec.package = getPackage(spec.package)\n\n  if (!spec.output.filename) {\n    spec.output.filename = spec.isDev ? 'app.js' : buildFilename(spec.package, spec.output.hash, 'js')\n  }\n\n  if (!spec.output.cssFilename) {\n    spec.output.cssFilename = spec.isDev ? 'app.css' : buildFilename(spec.package, spec.output.hash, 'css')\n  }\n\n  var config = getBaseConfig(spec)\n\n  // check for any module replacements\n  if (spec.replace) {\n    for (var item in spec.replace) {\n      // allow for simple strings\n      if (typeof item === 'string') {\n        var regex = new RegExp('^' + item + '$')\n      }\n      var newResource = spec.replace[item]\n      if (typeof newResource === 'string') {\n        newResource = path.resolve(newResource)\n      }\n      config.plugins.push(new webpack.NormalModuleReplacementPlugin(regex, newResource))\n    }\n  }\n\n  // check for any module definitions\n  if (spec.define) {\n    config.plugins.push(new webpack.DefinePlugin(spec.define))\n  }\n\n  // dev specific stuff\n  if (spec.isDev) {\n    // debugging option\n    // https://webpack.github.io/docs/configuration.html#devtool\n    // https://github.com/HenrikJoreteg/hjs-webpack/issues/63\n    // Supports original code (before transforms) with pretty good initial\n    // build speed and good rebuild speed\n    config.devtool = spec.devtool || 'cheap-module-eval-source-map'\n\n    // Create our dev server config for use in bin/hjs-dev-server\n    config.devServer = defaults(spec.devServer, {\n      // For webpack-dev-middleware\n      noInfo: true,\n      quiet: false,\n      lazy: false,\n      publicPath: spec.output.publicPath,\n      // Our own options for hjs-dev-server\n      historyApiFallback: true,\n      hot: true,\n      contentBase: outputFolder,\n      port: spec.port,\n      https: spec.https,\n      hostname: spec.hostname || spec.host\n    })\n\n    // Enable Webpack HMR unless explictly disabled\n    if (config.devServer.hot) {\n      installedHotLoaders.load(config)\n    }\n\n    // Add optional loaders\n    installedStyleLoaders.forEach(function (item) {\n      config.module.rules.push(item.dev)\n    })\n\n    // Add visualizer plugin\n    if (isInstalled('webpack-visualizer-plugin')) {\n      config.plugins.push(\n        new (require('webpack-visualizer-plugin'))()\n      )\n    }\n  } else {\n    // clear out output folder if so configured\n    if (spec.clearBeforeBuild) {\n      // Throw error if trying to clear output directory but it contains the cwd\n      // See https://github.com/HenrikJoreteg/hjs-webpack/issues/186\n      if (containsPath(cwd, outputFolder)) {\n        throw new Error('Cannot clear out directory since it contains the current working directory.\\nTried to clear ' + outputFolder + ' from ' + cwd)\n      }\n\n      // allow passing a glob (limit to within folder though)\n      if (typeof spec.clearBeforeBuild === 'string') {\n        // create the output folder if it doesn't exist\n        // just for convenience\n        if (!fs.existsSync(outputFolder)) {\n          fs.mkdirSync(outputFolder)\n        }\n        rimraf.sync(outputFolder + '/' + spec.clearBeforeBuild)\n      } else {\n        rimraf.sync(outputFolder)\n        fs.mkdirSync(outputFolder)\n      }\n    }\n\n    // minify in production\n    config.plugins.push(\n      new webpack.optimize.UglifyJsPlugin(spec.uglify),\n      new ExtractTextPlugin({\n        filename: spec.output.cssFilename,\n        allChunks: true\n      }),\n      new webpack.DefinePlugin({\n        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')\n      })\n    )\n\n    // Add optional loaders\n    installedStyleLoaders.forEach(function (item) {\n      config.module.rules.push(item.production)\n    })\n  }\n\n  return config\n}\n\nfunction buildFilename (pack, hash, ext) {\n  return [\n    pack.name,\n    // extract-text-plugin uses [contenthash] and webpack uses [hash]\n    hash ? (ext === 'css' ? '[contenthash]' : '[hash]') : pack.version,\n    ext || 'js'\n  ].join('.')\n}\n\nfunction checkRequired (opts) {\n  var props = ['out', 'in']\n  if (!opts || !props.every(function (prop) { return opts.hasOwnProperty(prop) })) {\n    throw new Error('Must pass in options object with `in` and `out` properties')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/base-config.js":"var HtmlPlugin = require('./html-plugin')\nvar pick = require('lodash.pick')\nvar isInstalled = require('./is-installed')\n\nmodule.exports = function getBaseConfig (spec) {\n  var baseConfig = {\n    entry: [\n      spec.entry\n    ],\n    output: {\n      filename: spec.output.filename,\n      path: spec.output.path,\n      publicPath: spec.output.publicPath\n    },\n    resolve: {\n      extensions: [\n        '.js',\n        '.jsx',\n        '.json'\n      ]\n    },\n    plugins: [\n      new HtmlPlugin(pick(spec, [\n        'html',\n        'isDev',\n        'serveCustomHtmlInDev',\n        'package'\n      ]))\n    ],\n    module: {\n      rules: []\n    }\n  }\n\n  var optionalBaseLoaders = [\n    {\n      pkg: 'worker-loader',\n      config: {\n        test: /(^|\\.)worker\\.js$/,\n        exclude: /node_modules/,\n        use: ['worker-loader']\n      }\n    },\n    {\n      pkg: 'worker-loader',\n      config: {\n        test: /(^|\\.)thread\\.js$/,\n        exclude: /node_modules/,\n        use: [\n            { loader: 'worker-loader', options: { inline: true } }\n        ]\n      }\n    },\n    {\n      pkg: 'babel-loader',\n      config: {\n        test: /\\.(js|jsx|babel)$/,\n        exclude: /node_modules/,\n        use: ['babel-loader']\n      }\n    },\n    {\n      pkg: 'coffee-loader',\n      config: {\n        test: /\\.coffee$/,\n        use: ['coffee-loader']\n      }\n    },\n    {\n      pkg: 'cjsx-loader',\n      config: {\n        test: /\\.cjsx$/,\n        use: ['coffee-loader', 'cjsx-loader']\n      }\n    },\n    {\n      pkg: 'awesome-typescript-loader',\n      config: {\n        test: /\\.(ts|tsx)$/,\n        use: ['awesome-typescript-loader']\n      }\n    },\n    {\n      pkg: 'livescript-loader',\n      config: {\n        test: /\\.ls$/,\n        use: ['livescript-loader']\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.otf(\\?\\S*)?$/,\n        use: [{\n          loader: 'url-loader',\n          options: { limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.eot(\\?\\S*)?$/,\n        use: [{\n          loader: 'url-loader',\n          options: { limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.svg(\\?\\S*)?$/,\n        use: [{\n          loader: 'url-loader',\n          options: { mimetype: 'image/svg+xml', limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.ttf(\\?\\S*)?$/,\n        use: [{\n          loader: 'url-loader',\n          options: { mimetype: 'application/octet-stream', limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.woff2?(\\?\\S*)?$/,\n        use: [{\n          loader: 'url-loader',\n          options: { mimetype: 'application/font-woff', limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'url-loader',\n      config: {\n        test: /\\.(jpe?g|png|gif)$/,\n        use: [{\n          loader: 'url-loader',\n          options: { limit: spec.urlLoaderLimit }\n        }]\n      }\n    },\n    {\n      pkg: 'jade-loader',\n      config: {\n        test: /\\.jade$/,\n        use: ['jade-loader']\n      }\n    },\n    {\n      pkg: 'pug-loader',\n      config: {\n        test: /\\.(pug|jade)$/,\n        use: ['pug-loader']\n      }\n    }\n  ]\n\n  // Add optional\n  optionalBaseLoaders.forEach(function (item) {\n    if (isInstalled(item.pkg)) {\n      baseConfig.module.rules.push(item.config)\n    }\n  })\n\n  return baseConfig\n}\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/html-plugin.js":"var assign = require('lodash.assign')\n\n// helper for generating default HTML\nfunction defaultHtml (incomingData) {\n  var data = assign({\n    charset: 'utf-8',\n    metaViewport: {\n      userScalable: false\n    },\n    html: '<div id=\"root\"></div>',\n    publicPath: '/'\n  }, incomingData)\n  var result = ['<!doctype html>']\n  var add = function () {\n    result.push.apply(result, arguments)\n  }\n\n  if (data.lang) {\n    add('<html lang=\"' + data.lang + '\">')\n  }\n  add('<head>')\n  add('<meta charset=\"' + data.charset + '\"/>')\n  if (data.metaViewport !== false) {\n    var scalable = data.metaViewport.userScalable ? 'yes' : 'no'\n    add('<meta name=\"viewport\" content=\"width=device-width, ' +\n      'initial-scale=1, ' +\n      'user-scalable=' + scalable + '\"/>')\n  }\n  if (data.metaTags) {\n    for (var key in data.metaTags) {\n      add('<meta name=\"' + key + '\" content=\"' + data.metaTags[key] + '\"/>')\n    }\n  }\n  if (data.title) {\n    add('<title>' + data.title + '</title>')\n  }\n  if (data.css) {\n    add('<link rel=\"stylesheet\" href=\"' + data.publicPath + data.css + '\"/>')\n  }\n  if (data.head) {\n    add(data.head)\n  }\n  add('</head>')\n  add('<body>')\n  if (data.html) {\n    add(data.html)\n  }\n  add('<script src=\"' + data.publicPath + data.main + '\"></script>')\n  add('</body>')\n  if (data.lang) {\n    add('</html>')\n  }\n  return result.join('')\n}\n\n// Main export\nfunction HJSPlugin (options) {\n  this.config = options || {}\n  this.filename = options.filename || 'index.html'\n}\n\nHJSPlugin.prototype.apply = function (compiler) {\n  var self = this\n  var htmlFunction = this.config.html\n  var isDev = this.config.isDev\n  var serveCustomHtmlInDev = this.config.serveCustomHtmlInDev\n\n  // let user pass `true` to use\n  // the simple default\n  // Same if `isDev` and `serveCustomHtmlInDev` is falsy\n  if (htmlFunction === true || (!serveCustomHtmlInDev && isDev)) {\n    htmlFunction = defaultHtml\n  } else if (!htmlFunction) {\n    return\n  }\n\n  self.compiler = compiler\n\n  compiler.plugin('emit', function (compiler, callback) {\n    // store stats on self\n    self.stats = compiler.getStats().toJson()\n    var context = self.getAssets()\n\n    // attach default template renderer\n    // this is useful if you want default\n    // html but want to create multiple or\n    // differently named HTML files\n    context.defaultTemplate = function (opts) {\n      var templateData = assign({}, context, opts)\n      return defaultHtml(templateData)\n    }\n\n    // access to package info\n    context.package = self.config.package\n\n    // access to stats\n    context.stats = self.stats\n\n    // expose `isDev` flag to html function context\n    context.isDev = self.config.isDev\n\n    // handle both sync and async versions\n    if (htmlFunction.length === 2) {\n      htmlFunction(context, function (err, result) {\n        if (err) throw err\n        self.addAssets(compiler, result)\n        callback()\n      })\n    } else {\n      self.addAssets(compiler, htmlFunction(context))\n      callback()\n    }\n  })\n}\n\n// Oddly enough we have to pass in the compiler here\n// it's changed from when it was stored on `this` previously\nHJSPlugin.prototype.addAssets = function (compiler, data) {\n  var dataType = typeof data\n  var pages\n  // if it's a string, we assume it's an html\n  // string for the index file\n  if (dataType === 'string') {\n    pages = {}\n    pages[this.filename] = data\n  } else if (dataType === 'object') {\n    pages = data\n  } else {\n    throw new Error('Result from `html` callback must be a string or an object')\n  }\n\n  for (var name in pages) {\n    compiler.assets[name] = (function (asset) {\n      return {\n        source: function () {\n          return asset\n        },\n        size: function () {\n          return asset.length\n        }\n      }\n    }(pages[name]))\n  }\n}\n\nHJSPlugin.prototype.getAssets = function () {\n  var assets = this.assets = {}\n  var value, chunk\n\n  for (chunk in this.stats.assetsByChunkName) {\n    value = this.stats.assetsByChunkName[chunk]\n\n    // Webpack outputs an array for each chunk when using sourcemaps\n    if (value instanceof Array) {\n      // if we've got a CSS file add it here\n      if (chunk === 'main' && value.length === 2) {\n        assets.css = value[1]\n      }\n\n      // The main bundle seems like it's always the first\n      value = value[0]\n    }\n\n    assets[chunk] = value\n  }\n\n  return assets\n}\n\nmodule.exports = HJSPlugin\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/is-installed.js":"module.exports = function (name) {\n  try {\n    require.resolve(name)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/get-package.js":"var fs = require('fs')\nvar path = require('path')\nvar findRoot = require('find-root')\nvar rootFolder = findRoot(process.cwd())\n\nmodule.exports = function (pack) {\n  var result = getPackage(pack)\n\n  if (!result.version) {\n    result.version = '0.0.0'\n  }\n\n  if (!result.name) {\n    result.name = 'built-by-hjs-webpack'\n  }\n  return result\n}\n\nfunction getPackage (pack) {\n  if (typeof pack === 'string') {\n    // see if it's JSON\n    try {\n      return JSON.parse(pack)\n    } catch (e) {\n      // see if it's a filepath to the package.json file\n      try {\n        return JSON.parse(fs.readFileSync(path.resolve(pack), 'utf-8'))\n      } catch (e) {}\n    }\n  } else if (pack == null) {\n    // try to read it\n    try {\n      return JSON.parse(fs.readFileSync(path.join(rootFolder, 'package.json'), 'utf-8'))\n    } catch (e) {\n      throw new Error('Could not find package.json')\n    }\n  }\n\n  // return the original in case\n  // it was already an object.\n  return pack\n}\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/installed-style-loaders.js":"var ExtractTextPlugin = require('extract-text-webpack-plugin')\nvar isInstalled = require('./is-installed')\n\nvar postCssOptions = {}\nvar hasInstalledAutoprefixer = isInstalled('autoprefixer')\n\ntry {\n  // look for a config file and use its contents\n  postCssOptions = require(process.cwd() + '/postcss.config.js')\n\n  // our label says autoprefixer is included, so we should support that\n  // plugin not being defined even if there is a config file\n  if (hasInstalledAutoprefixer) {\n    var isMissingAutoprefixerInPlugins = !postCssOptions.plugins || !postCssOptions.plugins.includes(function (plugin) {\n      return plugin.postcssPlugin === 'autoprefixer'\n    })\n\n    if (isMissingAutoprefixerInPlugins) {\n      if (!postCssOptions.plugins) {\n        postCssOptions.plugins = [require('autoprefixer')]\n      } else {\n        postCssOptions.plugins.push(require('autoprefixer'))\n      }\n    }\n  }\n} catch (e) {\n  postCssOptions = {\n    plugins: hasInstalledAutoprefixer ? [require('autoprefixer')] : []\n  }\n}\n\nvar postcssLoaderWithPlugins = {\n  loader: 'postcss-loader',\n  options: postCssOptions\n}\n\nvar stylusLoaderWithPlugins = {\n  loader: 'stylus-loader',\n  options: {\n    use: isInstalled('yeticss') ? [require('yeticss')()] : []\n  }\n}\n\nvar installedLoaders = []\nvar baseLoaders = ['style-loader', 'css-loader', 'postcss-loader']\nvar baseConfig = {\n  dev: {\n    test: /\\.css$/,\n    use: ['style-loader', 'css-loader', postcssLoaderWithPlugins]\n  },\n  production: {\n    test: /\\.css$/,\n    use: ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: ['css-loader', postcssLoaderWithPlugins]\n    })\n  }\n}\n\n// All optional loader plugins are listed here\n// `pkg` is the npm name of the loaders\n// `config` contains a webpack loader config for development and production\n\nvar styleLoaders = [\n  {\n    pkg: 'stylus-loader',\n    config: {\n      dev: {\n        test: /\\.styl$/,\n        use: ['style-loader', 'css-loader', postcssLoaderWithPlugins, stylusLoaderWithPlugins]\n      },\n      production: {\n        test: /\\.styl$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', postcssLoaderWithPlugins, stylusLoaderWithPlugins]\n        })\n      }\n    }\n  },\n  {\n    pkg: 'less-loader',\n    config: {\n      dev: {\n        test: /\\.less$/,\n        use: ['style-loader', 'css-loader', postcssLoaderWithPlugins, 'less-loader']\n      },\n      production: {\n        test: /\\.less$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', postcssLoaderWithPlugins, 'less-loader']\n        })\n      }\n    }\n  },\n  {\n    pkg: 'sass-loader',\n    config: {\n      dev: {\n        test: /\\.scss$/,\n        use: ['style-loader', 'css-loader', postcssLoaderWithPlugins, 'sass-loader']\n      },\n      production: {\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', postcssLoaderWithPlugins, 'sass-loader']\n        })\n      }\n    }\n  },\n  {\n    pkg: 'sass-loader',\n    config: {\n      dev: {\n        test: /\\.sass$/,\n        use: [\n          'style-loader', 'css-loader', postcssLoaderWithPlugins,\n            { loader: 'sass-loader', options: { indentedSyntax: true } }\n        ]\n      },\n      production: {\n        test: /\\.sass$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            'css-loader', postcssLoaderWithPlugins,\n                { loader: 'sass-loader', options: { indentedSyntax: true } }\n          ]\n        })\n      }\n    }\n  }\n]\n\n// First check if any but not all of the base loaders are installed\nvar someBaseLoadersInstalled = baseLoaders.some(isInstalled)\nvar allBaseLoadersInstalled = baseLoaders.every(isInstalled)\n\nif (someBaseLoadersInstalled && !allBaseLoadersInstalled) {\n  throw new Error('The following loaders must all be installed together: ' + baseLoaders.join(', '))\n} else {\n  installedLoaders.push(baseConfig)\n}\n\nstyleLoaders\n    .filter(function (loader) { return isInstalled(loader.pkg) })\n    .forEach(function (loader) {\n      if (allBaseLoadersInstalled) {\n        installedLoaders.push(loader.config)\n      } else {\n        throw new Error('The loader ' + loader.pkg + ' needs the following loaders to be installed: ' + baseLoaders.join(', '))\n      }\n    })\n\nmodule.exports = installedLoaders\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/lib/installed-hot-loaders.js":"var webpack = require('webpack')\nvar path = require('path')\n\nfunction load (config) {\n  // add hot loading clientside code\n  config.entry.unshift(\n    // Full path to webpack-hot-middleware so it works in npm2 and npm3\n    path.join(path.dirname(require.resolve('webpack-hot-middleware')), 'client')\n  )\n\n  // add dev plugins\n  config.plugins = config.plugins.concat([\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin()\n  ])\n}\n\nmodule.exports = {\n  load: load\n}\n","/home/travis/build/npmtest/node-npmtest-hjs-webpack/node_modules/hjs-webpack/bin/hjs-dev-server.js":"#!/usr/bin/env node\n\n// Based on\n// https://github.com/gaearon/react-transform-boilerplate/blob/master/devServer.js\n\nvar fs = require('fs')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar assign = require('lodash.assign')\nvar compress = require('compression')\nvar httpProxyMiddleware = require('http-proxy-middleware')\n\nvar configFile = process.argv[2] || 'webpack.config.js'\nvar config\ntry {\n  config = require(path.join(process.cwd(), configFile))\n} catch (e) {\n  console.error(e.stack)\n  console.error(\n    'Failed to load webpack config, please use like this\\n' +\n    'hjs-dev-server.js webpack.config.js\\n'\n  )\n  process.exit(1)\n}\n\nvar serverConfig = config.devServer\nvar https = serverConfig.https\nvar app = express()\n\nvar createServer = require(https ? 'https' : 'http').createServer\nvar server\n\nif (serverConfig.compress) {\n  app.use(compress())\n}\n\nif (https) {\n  var httpsConfig = {\n    key: fs.readFileSync(path.resolve(__dirname, '../resources/hjs-webpack-localhost.key')),\n    cert: fs.readFileSync(path.resolve(__dirname, '../resources/hjs-webpack-localhost.crt'))\n  }\n\n  if (typeof https === 'object') {\n    assign(httpsConfig, https)\n  }\n\n  server = createServer(httpsConfig, app)\n} else {\n  server = createServer(app)\n}\n\nvar compiler = webpack(config)\n\nif (serverConfig.proxy) {\n  if (!Array.isArray(serverConfig.proxy)) {\n    serverConfig.proxy = [serverConfig.proxy]\n  }\n  serverConfig.proxy.forEach(function (proxyConfig) {\n    var proxy = httpProxyMiddleware(proxyConfig.context, proxyConfig.options)\n    app.use(function (req, res, next) {\n      next()\n    }, proxy)\n  })\n}\n\nif (serverConfig.historyApiFallback) {\n  app.use(require('connect-history-api-fallback')({\n    verbose: false\n  }))\n}\n\napp.use(require('webpack-dev-middleware')(compiler, serverConfig))\n\nif (serverConfig.hot) {\n  app.use(require('webpack-hot-middleware')(compiler))\n}\n\nif (serverConfig.contentBase) {\n  var allowCrossDomain = function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*')\n    res.header('Access-Control-Allow-Methods', 'GET,OPTIONS')\n    res.header('Access-Control-Allow-Headers', 'Content-Type')\n\n    next()\n  }\n  app.use(allowCrossDomain)\n  app.use(express.static(serverConfig.contentBase))\n}\n\nserver.listen(serverConfig.port, serverConfig.hostname, function (err) {\n  if (err) {\n    console.error(err)\n    return\n  }\n\n  var protocol = https ? 'https' : 'http'\n  console.log('Listening at ' + protocol + '://' + serverConfig.hostname + ':' + serverConfig.port)\n})\n"}